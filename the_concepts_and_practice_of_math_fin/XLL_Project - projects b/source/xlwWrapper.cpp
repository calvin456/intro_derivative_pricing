//// 
//// Autogenerated by xlw 
//// Do not edit this file, it will be overwritten 
//// by InterfaceGenerator 
////

#include "xlw/MyContainers.h"
#include <xlw/CellMatrix.h>
#include "cppinterface.h"
#include <xlw/xlw.h>
#include <xlw/XlFunctionRegistration.h>
#include <stdexcept>
#include <xlw/XlOpenClose.h>
#include <xlw/HiResTimer.h>
using namespace xlw;

namespace {
const char* LibraryName = "MyProjectLibrary";
};


// registrations start here


namespace
{
XLRegistration::Arg
_BlackScholesCallArgs[]=
{
{ "Spot","spot ","B"},
{ "Strike","strike ","B"},
{ "r","interest rate ","B"},
{ "d","dividend yield ","B"},
{ "Vol","volatility ","B"},
{ "Expiry","expiry ","B"}
};
  XLRegistration::XLFunctionRegistrationHelper
register_BlackScholesCall("xl_BlackScholesCall",
"_BlackScholesCall",
" evaluate BlackScholes call price ",
LibraryName,
_BlackScholesCallArgs,
6
,false
,false
,""
,""
,false
,false
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xl_BlackScholesCall(
double Spot,
double Strike,
double r,
double d,
double Vol,
double Expiry)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);







double result(
	_BlackScholesCall(
		Spot,
		Strike,
		r,
		d,
		Vol,
		Expiry)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
_BlackScholesPutArgs[]=
{
{ "Spot","spot ","B"},
{ "Strike","strike ","B"},
{ "r","interest rate ","B"},
{ "d","dividend yield ","B"},
{ "Vol","volatility ","B"},
{ "Expiry","expiry ","B"}
};
  XLRegistration::XLFunctionRegistrationHelper
register_BlackScholesPut("xl_BlackScholesPut",
"_BlackScholesPut",
" evaluate BlackScholes put price ",
LibraryName,
_BlackScholesPutArgs,
6
,false
,false
,""
,""
,false
,false
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xl_BlackScholesPut(
double Spot,
double Strike,
double r,
double d,
double Vol,
double Expiry)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);







double result(
	_BlackScholesPut(
		Spot,
		Strike,
		r,
		d,
		Vol,
		Expiry)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
_BlackScholesDigitalCallArgs[]=
{
{ "Spot","spot ","B"},
{ "Strike","strike ","B"},
{ "r","interest rate ","B"},
{ "d","dividend yield ","B"},
{ "Vol","volatility ","B"},
{ "Expiry","expiry ","B"}
};
  XLRegistration::XLFunctionRegistrationHelper
register_BlackScholesDigitalCall("xl_BlackScholesDigitalCall",
"_BlackScholesDigitalCall",
" evaluate BlackScholes digital call price ",
LibraryName,
_BlackScholesDigitalCallArgs,
6
,false
,false
,""
,""
,false
,false
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xl_BlackScholesDigitalCall(
double Spot,
double Strike,
double r,
double d,
double Vol,
double Expiry)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);







double result(
	_BlackScholesDigitalCall(
		Spot,
		Strike,
		r,
		d,
		Vol,
		Expiry)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
_BlackScholesDigitalPutArgs[]=
{
{ "Spot","spot ","B"},
{ "Strike","strike ","B"},
{ "r","interest rate ","B"},
{ "d","dividend yield ","B"},
{ "Vol","volatility ","B"},
{ "Expiry","expiry ","B"}
};
  XLRegistration::XLFunctionRegistrationHelper
register_BlackScholesDigitalPut("xl_BlackScholesDigitalPut",
"_BlackScholesDigitalPut",
" evaluate BlackScholes digital put price ",
LibraryName,
_BlackScholesDigitalPutArgs,
6
,false
,false
,""
,""
,false
,false
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xl_BlackScholesDigitalPut(
double Spot,
double Strike,
double r,
double d,
double Vol,
double Expiry)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);







double result(
	_BlackScholesDigitalPut(
		Spot,
		Strike,
		r,
		d,
		Vol,
		Expiry)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
_ForwardArgs[]=
{
{ "Spot","spot ","B"},
{ "Strike","strike ","B"},
{ "r","interest rate ","B"},
{ "d","dividend yield ","B"},
{ "Expiry","expiry ","B"}
};
  XLRegistration::XLFunctionRegistrationHelper
register_Forward("xl_Forward",
"_Forward",
" evaluate forward price ",
LibraryName,
_ForwardArgs,
5
,false
,false
,""
,""
,false
,false
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xl_Forward(
double Spot,
double Strike,
double r,
double d,
double Expiry)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);






double result(
	_Forward(
		Spot,
		Strike,
		r,
		d,
		Expiry)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
_ZeroCouponArgs[]=
{
{ "r","interest rate ","B"},
{ "Expiry","expiry ","B"}
};
  XLRegistration::XLFunctionRegistrationHelper
register_ZeroCoupon("xl_ZeroCoupon",
"_ZeroCoupon",
" evaluate forward price ",
LibraryName,
_ZeroCouponArgs,
2
,false
,false
,""
,""
,false
,false
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xl_ZeroCoupon(
double r,
double Expiry)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);



double result(
	_ZeroCoupon(
		r,
		Expiry)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
_FinalPrice_EulerSteppingArgs[]=
{
{ "Spot","spot ","B"},
{ "Strike","strike ","B"},
{ "r","interest rate ","B"},
{ "d","dividend yield ","B"},
{ "Vol","volatility ","B"},
{ "Expiry","expiry ","B"}
};
  XLRegistration::XLFunctionRegistrationHelper
register_FinalPrice_EulerStepping("xl_FinalPrice_EulerStepping",
"_FinalPrice_EulerStepping",
" evaluate final price bsd on Euler stepping ",
LibraryName,
_FinalPrice_EulerSteppingArgs,
6
,false
,false
,""
,""
,false
,false
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xl_FinalPrice_EulerStepping(
double Spot,
double Strike,
double r,
double d,
double Vol,
double Expiry)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);







double result(
	_FinalPrice_EulerStepping(
		Spot,
		Strike,
		r,
		d,
		Vol,
		Expiry)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
_BlackScholesCallVegaArgs[]=
{
{ "Spot","spot ","B"},
{ "Strike","strike ","B"},
{ "r","interest rate ","B"},
{ "d","dividend yield ","B"},
{ "Vol","volatility ","B"},
{ "Expiry","expiry ","B"}
};
  XLRegistration::XLFunctionRegistrationHelper
register_BlackScholesCallVega("xl_BlackScholesCallVega",
"_BlackScholesCallVega",
" evaluate BlackScholes call vega derivatives ",
LibraryName,
_BlackScholesCallVegaArgs,
6
,false
,false
,""
,""
,false
,false
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xl_BlackScholesCallVega(
double Spot,
double Strike,
double r,
double d,
double Vol,
double Expiry)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);







double result(
	_BlackScholesCallVega(
		Spot,
		Strike,
		r,
		d,
		Vol,
		Expiry)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
_BlackScholesCallDeltaArgs[]=
{
{ "Spot","spot ","B"},
{ "Strike","strike ","B"},
{ "r","interest rate ","B"},
{ "d","dividend yield ","B"},
{ "Vol","volatility ","B"},
{ "Expiry","expiry ","B"}
};
  XLRegistration::XLFunctionRegistrationHelper
register_BlackScholesCallDelta("xl_BlackScholesCallDelta",
"_BlackScholesCallDelta",
" evaluate BlackScholes call delta derivatives ",
LibraryName,
_BlackScholesCallDeltaArgs,
6
,false
,false
,""
,""
,false
,false
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xl_BlackScholesCallDelta(
double Spot,
double Strike,
double r,
double d,
double Vol,
double Expiry)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);







double result(
	_BlackScholesCallDelta(
		Spot,
		Strike,
		r,
		d,
		Vol,
		Expiry)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
_BlackScholesGammaArgs[]=
{
{ "Spot","spot ","B"},
{ "Strike","strike ","B"},
{ "r","interest rate ","B"},
{ "d","dividend yield ","B"},
{ "Vol","volatility ","B"},
{ "Expiry","expiry ","B"}
};
  XLRegistration::XLFunctionRegistrationHelper
register_BlackScholesGamma("xl_BlackScholesGamma",
"_BlackScholesGamma",
" evaluate BlackScholes call gamma derivatives ",
LibraryName,
_BlackScholesGammaArgs,
6
,false
,false
,""
,""
,false
,false
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xl_BlackScholesGamma(
double Spot,
double Strike,
double r,
double d,
double Vol,
double Expiry)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);







double result(
	_BlackScholesGamma(
		Spot,
		Strike,
		r,
		d,
		Vol,
		Expiry)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
_BlackScholesCallRhoArgs[]=
{
{ "Spot","spot ","B"},
{ "Strike","strike ","B"},
{ "r","interest rate ","B"},
{ "d","dividend yield ","B"},
{ "Vol","volatility ","B"},
{ "Expiry","expiry ","B"}
};
  XLRegistration::XLFunctionRegistrationHelper
register_BlackScholesCallRho("xl_BlackScholesCallRho",
"_BlackScholesCallRho",
" evaluate BlackScholes call rho derivatives ",
LibraryName,
_BlackScholesCallRhoArgs,
6
,false
,false
,""
,""
,false
,false
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xl_BlackScholesCallRho(
double Spot,
double Strike,
double r,
double d,
double Vol,
double Expiry)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);







double result(
	_BlackScholesCallRho(
		Spot,
		Strike,
		r,
		d,
		Vol,
		Expiry)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
_BlackScholesCallThetaArgs[]=
{
{ "Spot","spot ","B"},
{ "Strike","strike ","B"},
{ "r","interest rate ","B"},
{ "d","dividend yield ","B"},
{ "Vol","volatility ","B"},
{ "Expiry","expiry ","B"}
};
  XLRegistration::XLFunctionRegistrationHelper
register_BlackScholesCallTheta("xl_BlackScholesCallTheta",
"_BlackScholesCallTheta",
" evaluate BlackScholes call rho derivatives ",
LibraryName,
_BlackScholesCallThetaArgs,
6
,false
,false
,""
,""
,false
,false
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xl_BlackScholesCallTheta(
double Spot,
double Strike,
double r,
double d,
double Vol,
double Expiry)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);







double result(
	_BlackScholesCallTheta(
		Spot,
		Strike,
		r,
		d,
		Vol,
		Expiry)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
_ImpliedVolatilityArgs[]=
{
{ "Price","option price ","B"},
{ "r","interest rate ","B"},
{ "d","dividend yield ","B"},
{ "Expiry","expiry ","B"},
{ "Spot","spot ","B"},
{ "Strike","strike ","B"},
{ "Start","start vol. Set by default 20% ","B"},
{ "Tolerance","tolerance. Set by default 1e-6 ","B"}
};
  XLRegistration::XLFunctionRegistrationHelper
register_ImpliedVolatility("xl_ImpliedVolatility",
"_ImpliedVolatility",
" evaluate implied volatility using BSM ",
LibraryName,
_ImpliedVolatilityArgs,
8
,false
,false
,""
,""
,false
,false
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xl_ImpliedVolatility(
double Price,
double r,
double d,
double Expiry,
double Spot,
double Strike,
double Start,
double Tolerance)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);









double result(
	_ImpliedVolatility(
		Price,
		r,
		d,
		Expiry,
		Spot,
		Strike,
		Start,
		Tolerance)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
_Analytical_jdm_pricer_callArgs[]=
{
{ "Spot","spot ","B"},
{ "Strike","strike ","B"},
{ "r","interest rate ","B"},
{ "d","dividend yield ","B"},
{ "Vol0","vol time 0 ","B"},
{ "Expiry","expiry ","B"},
{ "kappa","kappa ","B"},
{ "m","m ","B"},
{ "nu","nu ","B"}
};
  XLRegistration::XLFunctionRegistrationHelper
register_Analytical_jdm_pricer_call("xl_Analytical_jdm_pricer_call",
"_Analytical_jdm_pricer_call",
" evaluate jump diffusion model for vanilla call ",
LibraryName,
_Analytical_jdm_pricer_callArgs,
9
,false
,false
,""
,""
,false
,false
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xl_Analytical_jdm_pricer_call(
double Spot,
double Strike,
double r,
double d,
double Vol0,
double Expiry,
double kappa,
double m,
double nu)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);










double result(
	_Analytical_jdm_pricer_call(
		Spot,
		Strike,
		r,
		d,
		Vol0,
		Expiry,
		kappa,
		m,
		nu)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
_QuantCallOptionArgs[]=
{
{ "Spot","spot ","B"},
{ "Strike","strike ","B"},
{ "rd","interest rate of domestic currency ","B"},
{ "rf","interest rate of foreign currency ","B"},
{ "d","dvd yield ","B"},
{ "VolS","vol stock price ","B"},
{ "VolQ","vol foreign currency ","B"},
{ "correl","correl ","B"},
{ "Expiry","expiry ","B"}
};
  XLRegistration::XLFunctionRegistrationHelper
register_QuantCallOption("xl_QuantCallOption",
"_QuantCallOption",
" evaluate quanto vanilla call under BSM ",
LibraryName,
_QuantCallOptionArgs,
9
,false
,false
,""
,""
,false
,false
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xl_QuantCallOption(
double Spot,
double Strike,
double rd,
double rf,
double d,
double VolS,
double VolQ,
double correl,
double Expiry)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);










double result(
	_QuantCallOption(
		Spot,
		Strike,
		rd,
		rf,
		d,
		VolS,
		VolQ,
		correl,
		Expiry)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
_QuantPutOptionArgs[]=
{
{ "Spot","spot ","B"},
{ "Strike","strike ","B"},
{ "rd","interest rate of domestic currency ","B"},
{ "rf","interest rate of foreign currency ","B"},
{ "d","dvd yield ","B"},
{ "VolS","vol stock price ","B"},
{ "VolQ","vol foreign currency ","B"},
{ "correl","correl ","B"},
{ "Expiry","expiry ","B"}
};
  XLRegistration::XLFunctionRegistrationHelper
register_QuantPutOption("xl_QuantPutOption",
"_QuantPutOption",
" evaluate quanto vanilla put under BSM ",
LibraryName,
_QuantPutOptionArgs,
9
,false
,false
,""
,""
,false
,false
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xl_QuantPutOption(
double Spot,
double Strike,
double rd,
double rf,
double d,
double VolS,
double VolQ,
double correl,
double Expiry)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);










double result(
	_QuantPutOption(
		Spot,
		Strike,
		rd,
		rf,
		d,
		VolS,
		VolQ,
		correl,
		Expiry)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
_MargrabeOptionsArgs[]=
{
{ "Spot1","spot 1 ","B"},
{ "Spot2","spot2 ","B"},
{ "Vol1","vol1 ","B"},
{ "Vol2","vol2 ","B"},
{ "correl"," correl ","B"},
{ "Expiry","expiry ","B"}
};
  XLRegistration::XLFunctionRegistrationHelper
register_MargrabeOptions("xl_MargrabeOptions",
"_MargrabeOptions",
" evaluate Margrabe option under BSM ",
LibraryName,
_MargrabeOptionsArgs,
6
,false
,false
,""
,""
,false
,false
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xl_MargrabeOptions(
double Spot1,
double Spot2,
double Vol1,
double Vol2,
double correl,
double Expiry)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);







double result(
	_MargrabeOptions(
		Spot1,
		Spot2,
		Vol1,
		Vol2,
		correl,
		Expiry)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
_Analytical_heston_pricer_callArgs[]=
{
{ "mu","nu ","B"},
{ "Spot","spot ","B"},
{ "Vol","vol time 0 ","B"},
{ "r","interest rate ","B"},
{ "kappa","kappa ","B"},
{ "theta","theta ","B"},
{ "sigma","sigma ","B"},
{ "correl","rho correlation coef ","B"},
{ "Strike","strike ","B"},
{ "Expiry","expiry ","B"}
};
  XLRegistration::XLFunctionRegistrationHelper
register_Analytical_heston_pricer_call("xl_Analytical_heston_pricer_call",
"_Analytical_heston_pricer_call",
" evaluate Heston model for vanilla call ",
LibraryName,
_Analytical_heston_pricer_callArgs,
10
,false
,false
,""
,""
,false
,false
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xl_Analytical_heston_pricer_call(
double mu,
double Spot,
double Vol,
double r,
double kappa,
double theta,
double sigma,
double correl,
double Strike,
double Expiry)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);











double result(
	_Analytical_heston_pricer_call(
		mu,
		Spot,
		Vol,
		r,
		kappa,
		theta,
		sigma,
		correl,
		Strike,
		Expiry)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
_Analytical_vg_callArgs[]=
{
{ "Spot","spot ","B"},
{ "Strike","strike ","B"},
{ "r","interest rate ","B"},
{ "Expiry","expiry ","B"},
{ "Vol","vol time 0 ","B"},
{ "nu","nu ","B"},
{ "theta","theta ","B"}
};
  XLRegistration::XLFunctionRegistrationHelper
register_Analytical_vg_call("xl_Analytical_vg_call",
"_Analytical_vg_call",
" evaluate VG model for vanilla call ",
LibraryName,
_Analytical_vg_callArgs,
7
,false
,false
,""
,""
,false
,false
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xl_Analytical_vg_call(
double Spot,
double Strike,
double r,
double Expiry,
double Vol,
double nu,
double theta)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);








double result(
	_Analytical_vg_call(
		Spot,
		Strike,
		r,
		Expiry,
		Vol,
		nu,
		theta)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
_up_out_callArgs[]=
{
{ "Spot","spot ","B"},
{ "Strike","strike ","B"},
{ "Barrier","barrier ","B"},
{ "r","interest rate ","B"},
{ "d","dividend yield ","B"},
{ "Vol","vol time 0 ","B"},
{ "Expiry","expiry ","B"}
};
  XLRegistration::XLFunctionRegistrationHelper
register_up_out_call("xl_up_out_call",
"_up_out_call",
"The premium for the Up-and-Out call option ",
LibraryName,
_up_out_callArgs,
7
,false
,false
,""
,""
,false
,false
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xl_up_out_call(
double Spot,
double Strike,
double Barrier,
double r,
double d,
double Vol,
double Expiry)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);








double result(
	_up_out_call(
		Spot,
		Strike,
		Barrier,
		r,
		d,
		Vol,
		Expiry)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
_up_out_putArgs[]=
{
{ "Spot","spot ","B"},
{ "Strike","strike ","B"},
{ "Barrier","barrier ","B"},
{ "r","interest rate ","B"},
{ "d","dividend yield ","B"},
{ "Vol","vol time 0 ","B"},
{ "Expiry","expiry ","B"}
};
  XLRegistration::XLFunctionRegistrationHelper
register_up_out_put("xl_up_out_put",
"_up_out_put",
"The premium for the Up-and-Out call option ",
LibraryName,
_up_out_putArgs,
7
,false
,false
,""
,""
,false
,false
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xl_up_out_put(
double Spot,
double Strike,
double Barrier,
double r,
double d,
double Vol,
double Expiry)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);








double result(
	_up_out_put(
		Spot,
		Strike,
		Barrier,
		r,
		d,
		Vol,
		Expiry)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
_down_out_callArgs[]=
{
{ "Spot","spot ","B"},
{ "Strike","strike ","B"},
{ "Barrier","barrier ","B"},
{ "r","interest rate ","B"},
{ "d","dividend yield ","B"},
{ "Vol","vol time 0 ","B"},
{ "Expiry","expiry ","B"}
};
  XLRegistration::XLFunctionRegistrationHelper
register_down_out_call("xl_down_out_call",
"_down_out_call",
"The premium for the down-and-Out call option ",
LibraryName,
_down_out_callArgs,
7
,false
,false
,""
,""
,false
,false
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xl_down_out_call(
double Spot,
double Strike,
double Barrier,
double r,
double d,
double Vol,
double Expiry)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);








double result(
	_down_out_call(
		Spot,
		Strike,
		Barrier,
		r,
		d,
		Vol,
		Expiry)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
_down_out_putArgs[]=
{
{ "Spot","spot ","B"},
{ "Strike","strike ","B"},
{ "Barrier","barrier ","B"},
{ "r","interest rate ","B"},
{ "d","dividend yield ","B"},
{ "Vol","vol time 0 ","B"},
{ "Expiry","expiry ","B"}
};
  XLRegistration::XLFunctionRegistrationHelper
register_down_out_put("xl_down_out_put",
"_down_out_put",
"The premium for the down-and-Out call option ",
LibraryName,
_down_out_putArgs,
7
,false
,false
,""
,""
,false
,false
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xl_down_out_put(
double Spot,
double Strike,
double Barrier,
double r,
double d,
double Vol,
double Expiry)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);








double result(
	_down_out_put(
		Spot,
		Strike,
		Barrier,
		r,
		d,
		Vol,
		Expiry)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

//////////////////////////
// Methods that will get registered to execute in AutoOpen
//////////////////////////

//////////////////////////
// Methods that will get registered to execute in AutoClose
//////////////////////////

